{
  "author": {
    "name": "David Wee",
    "email": "rook2pawn@gmail.com",
    "url": "http://rook2pawn.com"
  },
  "name": "easing",
  "description": "Easing Functions Without the Framework Cruft",
  "version": "0.0.3",
  "keywords": [
    "easing",
    "animation",
    "tween"
  ],
  "homepage": "https://github.com/rook2pawn/node-easing",
  "repository": {
    "type": "git",
    "url": "git@github.com:rook2pawn/node-easing.git"
  },
  "main": "index.js",
  "dependencies": {},
  "devDependencies": {},
  "readme": "![easing](https://github.com/rook2pawn/node-easing/raw/master/graph.png)\n\neasing\n======\n\nEasing functions simply describe functions that are used for the purpose of easing.\nYou can find many libraries that give you easing functionality, but you're usually tied to a large library and\nthat means a large intrusion of unwanted code, similar to installing an application and it asking if you'd like the Bing Bar, Yahoo Search, \nand free Email Weather Reports with a promise to never sell your information unless the price is right.\n\nThis library just gives you the MATH.\n\nGive it an array of arbitrary size and it fills those values. You'll be animating and looking stylish in no time.\n\nLoad it up\n==========\n    \n    Simply include browser-easing.js and you can require('easing') directly in your client side code.\n\n\nSimple\n======\n\n    var x = Easing(new Array(11),'cubic');\n\n\n    And there you have it, an array of eleven elements whose value starts at 0 and ends at 1 which are populated with\n    cubic easing values.\n\n    [ 0,\n        0.0010000000000000002,\n        0.008000000000000002,\n        0.02700000000000001,\n        0.06400000000000002,\n        0.125,\n        0.21600000000000008,\n        0.3430000000000001,\n        0.5120000000000001,\n        0.7290000000000001,\n    1 ]\n\n\nTypes of Easing\n===============\n\nLinear\n------\n\n    simply call Easing(list,'linear')\n\n \nQuadratic\n---------\n\n    simply call Easing(list,'quadratic')\n\n \nCubic\n-----\n\n    simply call Easing(list,'cubic')\n\nQuartic\n-------\n\n    simply call Easing(list,'quartic')\n\nQuintic\n-------\n\n    simply call Easing(list,'quintic')\n\n\nSinusoidal\n----------\n\n    simply call Easing(list,'sinusoidal')\n    or Easing(list,'sin')\n\nCircular\n--------\n    \n    simply call Easing(list,'circular')\n\n\nExponential\n-----------\n    \n    simply call Easing(list,'exponential')\n\n\n\nOptional options\n================\n\nEnd To End\n----------\n\nIf we wanted to go from 0 to 1 back to 0 quadratically, simply call \n\n    Easing(list,'quadratic',{endToEnd:true});\n\nInvert\n------\n\nIf we want to go from 1 to 0 (or 1 to 0 back to 1) instead of 0 to 1, say 'linear' style, simply call \n\n    Easing(list,'linear',{invert:true});\n\nYou can mix and match these options.\n",
  "readmeFilename": "README.md",
  "_id": "easing@0.0.3",
  "_from": "easing@*"
}
