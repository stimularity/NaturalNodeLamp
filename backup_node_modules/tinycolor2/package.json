{
  "version": "0.9.9",
  "name": "tinycolor2",
  "description": "Fast Color Parsing and Manipulation",
  "url": "http://bgrins.github.com/TinyColor",
  "repository": {
    "type": "git",
    "url": "https://bgrins.github.com/TinyColor"
  },
  "keywords": [
    "color",
    "parser",
    "tinycolor"
  ],
  "author": {
    "name": "Brian Grinstead",
    "email": "briangrinstead@gmail.com",
    "url": "http://briangrinstead.com"
  },
  "contributors": [],
  "main": "./tinycolor.js",
  "directories": {},
  "engines": {
    "node": "*"
  },
  "readme": "# TinyColor\n## JavaScript color parsing\n\n### Features\n* Color Types Supported\n    * Hex\n\n            tinycolor(\"#000\");\n            tinycolor(\"000\");\n            tinycolor(\"#f0f0f6\");\n            tinycolor(\"f0f0f6\");\n    * RGB, RGBA\n\n            tinycolor(\"rgb (255, 0, 0)\");\n            tinycolor(\"rgb 255 0 0\");\n            tinycolor(\"rgba (255, 0, 0, .5)\");\n            tinycolor({ r: 255, g: 0, b: 0 });\n    * HSL, HSLA\n\n            tinycolor(\"hsl(0, 100%, 50%)\");\n            tinycolor(\"hsla(0, 100%, 50%, .5)\");\n            tinycolor(\"hsl(0, 100%, 50%)\");\n            tinycolor(\"hsl 0 1.0 0.5\");\n            tinycolor({ h: 0, s: 1, l: .5 }\");\n    * HSV, HSVA\n\n            tinycolor(\"hsv(0, 100%, 100%)\");\n            tinycolor(\"hsva(0, 100%, 100%, .5)\");\n            tinycolor(\"hsv (0 100% 100%)\");\n            tinycolor(\"hsv 0 1 1\");\n            tinycolor({ h: 0, s: 100, v: 100 }\");\n    * Named\n\n            tinycolor(\"RED\");\n            tinycolor(\"blanchedalmond\");\n            tinycolor(\"darkblue\");\n* File Size:\n\n        The minified size is:\n        The uncompressed size is:\n \n### Usage\n    var t = tinycolor(\"red\");\n    \n\tt.toHex() // \"ff0000\"\n\tt.toHexString() // \"#ff0000\"\n\tt.toRgb() // {\"r\":255,\"g\":0,\"b\":0} or {\"r\":255,\"g\":0,\"b\":0,\"a\":0.5}\n\tt.toRgbString() // \"rgb(255, 0, 0)\" or \"rgba(255, 0, 0, 0.5)\"\n    t.toHsv() // {\"h\":0,\"s\":1,\"v\":1}\n\tt.toHsvString() // \"hsv(0, 100%, 100%)\"\n\tt.toHsl() // {\"h\":0,\"s\":1,\"l\":0.5}\n\tt.toHslString() // \"hsl(0, 100%, 50%)\"\n\tt.toName() // \"red\"\n\n`tinycolor` may also be included as a [node](http://nodejs.org/) module like so:\n\n    var tinycolor = require(\"./tinycolor\");\n\t\n### Accepted String Input\nThe string parsing is very permissive.  It is meant to make typing a color as input as easy as possible.  All commas, percentages, parenthesis are optional, and most input allow either 0-1, 0%-100%, or 0-n (where n is either 100, 255, or 360 depending on the value). \n\nHSL and HSV both require either 0%-100% or 0-1.  RGB requires either 0-255 or 0%-100%.  If you call tinycolor.fromRatio, any input can also accept 0-1\nHere are some examples of string input:\n\n    red\n    #fff\n    fff\n    #ffffff\n    ffffff\n    rgb(255, 0, 0)\n    rgb 255 0 0\n    hsl(0, 100, 50)\n    hsl(0, 100%, 50%)\n    hsl 0 100 50\n    hsl 0 100% 50%\n    hsv(0, 100%, 100%)\n    hsv(0, 100, 100)\n    hsv 0 100% 100%\n    hsv 0 100 100\n    \n### Accepted Object Input\nIf you are calling this from code, you may want to use object input.  Here are examples of the different types of accepted object inputs:\n\n    { r: 255, g: 0, b: 0 }\n    { r: 255, g: 0, b: 0, a: .5 }\n    { r: 1, g: 0, b: 0 }\n    { h: 0, s: 100, l: 50 }\n    { h: 0, s: 100, v: 100 }\n    etc...\n\nSee index.html in the project for a demo.",
  "readmeFilename": "README.md",
  "_id": "tinycolor2@0.9.9",
  "_from": "tinycolor2@"
}
