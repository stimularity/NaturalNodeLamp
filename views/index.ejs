<!DOCTYPE html>

<html>
  <head>
	<title><%= title %></title>
	<meta name="viewport" content="initial-scale=1.0"> <!-- For mobile devices -->
	<link rel='shortcut icon' type='image/x-icon' href='/images/favicon.ico' />

	<link href="/stylesheets/jquery-ui-1.10.3.custom.min.css" rel="stylesheet">
	<link href="//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/css/bootstrap-combined.min.css" rel="stylesheet" />
	<link rel='stylesheet' href='/stylesheets/style.css' />
  </head>


  <body>

	<div class="container" name="container">

		<!-- Navigation Menu AKA time display -->
		<div class="navbar navbar-inverse">
			<div class="navbar-inner">
				<a class="brand" href="#"><%= title %></a>
				<ul class="nav">
					<li class="active"><a href="#"><i class="icon-time"></i> <span id="servertime"></span></a></li>
				</ul>
			</div>
		</div>
		
		<!-- Essential Functions Buttons -->
		<div class="btn-group">
			<button class="btn button" id="on">on</button>
			<button class="btn button" id="off">off</button>
		</div>
		<button class="btn" id="newalarm"><i class="icon-plus"></i> New Alarm</button>

		<br />
		<br />

		<!-- Graphical Interface items collected from /graphical -->
		<div id="graphical"></div><!-- /graphical -->

		<br />

		<!-- Bar that changes color based on current RGB settings -->
		<div class="samplebox"></div>

		<!-- Active Alarms Area -->
		<div id="alarms"></div><!-- /alarms -->

	</div> <!-- /container -->

	
	
	<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>
	<script src="/javascripts/jquery-ui-1.10.3.custom.min.js"></script>
	<script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/jqueryui-touch-punch/0.2.2/jquery.ui.touch-punch.min.js"></script>

<script src="/socket.io/socket.io.js"></script>
<script>


	var d = new Date();
	var mh = d.getHours(); //0 - 23
	var m = d.getMinutes(); //0 - 59

	//console.log('mh:' + mh + ' m: ' + m);

	// -- Socket.io --
	var socket = io.connect(); //Load socket.io
	//socket.emit('getAlarms'); //Tell server we want some alarms -> server emits 'refreshAlarms'

	//Set server time on DOM so we know the time is correct.
	socket.on('servertime', function(data){
		$('#servertime').empty().append(data['servertime']);
	});

	socket.on('refreshAlarms', function(a){

		$.get('/alarms', function(data){ //Get /alarms from server
			$('#alarms').empty().append(data); //Empty current alarms box

			$('#alarms div .btn').unbind().click(function(){ //Unbind all values then 
				var field = $(this).attr('title'); //DB row name
				var id = $(this).parent().parent('.row-fluid').attr('id'); //Id in DB
				//Toggle value
				var value = 0 //Value we want to set in DB
				if($(this).attr('value') == 0){ value = 1; }

				//Send to server -> Directly into DB!
				socket.emit('updateAlarm', id, field, value); //Send choice to server
				$(this).addClass('btn-primary'); 
			});

			//Bind events to all the shit here.
			$('.deletebutton').unbind().click(function(){
				var id = $(this).parent('.row-fluid').attr('id');
				console.log('Delete ' + id);
				socket.emit('deleteAlarm', id); //Does not refresh alarms
				$(this).parent('.row-fluid').fadeOut(250);
			});

			$('.icon-bell, .alarmtype').unbind().click(function(){
				$(this).unbind().click(function(){ socket.emit('getAlarms'); });
				var id = $(this).parent().parent('.row-fluid').attr('id'); //Current Alarms ID
				var row = $(this); //Current Alarm row
				$.get('/alarmbuttons', function(data){ //Get all alarm buttons
					row.parent().parent().after('<div class="row-fluid alarmbuttonrow'+id+'">'+data+'</div>'); //Add data from alarm buttons controller
					//Bind actions to buttons that were added.
					$('.alarmbutton').unbind().click(function(){
						action = $(this).attr('id');
						console.log('Execute ' + action + ' on alarm ' + id);
						socket.emit('updateAlarm', id, 'alarmtype', action);
						$('.alarmbuttonrow'+id).fadeOut(800, function(){ //Remove row then refresh alarms
							socket.emit('getAlarms');
						});
					});
				});
			});
		});
	});//-refreshAlarms end

	/**
	 * Updates Sliders every second. Pushed from
	 * Event UpdateUserInterface. Sends the colors of the leds.
	 * @param  {intiger} r Color of current LED
	 * @param  {intiger} g Color of current LED
	 * @param  {intiger} b Color of current LED
	 */
	socket.on('currentSliders', function(r, g, b){
		//Update slider positions
		if(!sliding) {
			$('#red').slider('value', r);
			$('#green').slider('value', g);
			$('#blue').slider('value', b);
		}
		//Set visual values
		$('#red-value').text(r);
		$('#blue-value').text(b);
		$('#green-value').text(g);

		//Update color preview div
		$('.samplebox').css('background-color','rgb('+r+','+g+','+b+')');
	});


	// -- Socket.io --

	$(document).ready(function() {
		
		/**
		 * Get buttons and sliders from animations library.
		 * Each animation has a set of graphical elements
		 * This loads those buttons into neat divs. 
		 */
		$.get('/graphical', function(data){
			$('#graphical').empty().append(data); //Empty Box and append button data
			activateButtons(); //Bind actions to buttons
			$('.controlpannel').hide();
			$('#home').fadeIn(1000); //Show main pannel

			//Activate tab and display proper pannel.
			$('#guitabs li').click(function(){
				$('#guitabs li').removeClass('active');
				area = $(this).text();
				$('.controlpannel').hide(); //Hide other pannels
				$('#'+area).fadeIn(500);
				$(this).addClass('active');
			});
		});

	});//End- Doc.ready

	/**
	 * When Buttons are loaded via graphical interface from the animations library
	 * this function binds actions to those buttons or sliders.
	 * @return {[type]} [description]
	 */
	var sliding = false;
	function activateButtons(){
		$( ".slider" ).unbind().slider({ max:255, min:0,
			slide: function(event, ui) {
				value = $(this).slider('value'); //Get value
				id = $(this).attr('id'); //Get identifier
				$('#'+id+'-value').text(value); //Update slider visual box
				socket.emit('interact', { id:id, value:value }); //Send to animations[]
			},
			start: function(event, ui){
				sliding = true;
			},
			stop: function(event, ui){
				sliding = false;
			}
		});

		$(".button").unbind().click(function(){
			id = $(this).attr('id');
			value = $(this).attr('alt');
			console.log("Pressed: " + id + " with value " + value);
			socket.emit('interact', { id:id, value:value }); //TODO have button send correct value.
		});

		$('#newalarm').unbind().click(function(){
			$.get('/alarmentry', function(data){
				lightBox(500, 0, data);
			});
		});
	}

	//Max's custom animated lightbox plugin. Quite magical.
	function lightBox(w, h, content) {
		$('#lightbox, #lightboxcore').remove(); //Destroy old lightboxes. There can only be one.
		$('body').prepend('<div id="lightboxcore">'+content+'</div>'); //Append inner box

		//Default values if none are set.
		marginsize = 200;
		width = $(window).width() - marginsize; 
		height = $(window).height() - marginsize;

		if(w != 0 && h == 0){ //Width is set, but not height, get height from content.	
			height = $('#lightboxcore').height(); //Get Height of box used for centering, height is set dynamically.
			width = w;
		}
		if(w == 0 && h != 0){ //Width is set, use default height. 
			height = h;
		}
		if(w != 0 && h != 0){ //Use user inputs. 
			width = w;
			height = h;
		}
		
		$('#lightboxcore').css({'width': width, 'height':height}); //Set width of lightboxcore

		//Add backdrop to DOm
		$('html').prepend('<div id="lightbox"></div>').fadeIn(400); 
		$('#lightbox').css({'height': $(document).height(), 'width': $(document).width()}); //Set proper size
		$("#lightbox").click(function() {
			closeLightbox(); //Bind close event to backdrop
		});
		//Center the core on page
		$('#lightboxcore').css("top", (($(window).height() - $('#lightboxcore').outerHeight()) / 2) + $(window).scrollTop() + "px");
		$('#lightboxcore').css("left", (($(window).width() - $('#lightboxcore').outerWidth()) / 2) + $(window).scrollLeft() + "px");
		//Make it visible. 
		$('#lightboxcore').hide().fadeIn(500);
	}
	function closeLightbox(){
		$('#lightbox').fadeOut(500);
		$('#lightboxcore').fadeOut(300);
	}


</script>
  </body>
</html>